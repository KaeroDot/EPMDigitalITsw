function pretty_plots()
% source of the data is at:
% https://github.com/KaeroDot/EPMDigitalITsw/tree/main/evaluation/results/
%
% reminder for algorithm prefixes:
%  - FE: frequency estimation algorithm defined in DI.EstimationAlgorithm - PSFE
%  - SR: Spline resampling + FFT rectangular window
%  - WF: WFFT HFT116D,
%  - MH: MHFE,
%  - WR: WRMS
%  - SV: resamplingSVstream

% How to call make_triple_plot:
%   make_triple_plot(...
%   'data_file_with_calculated_results',...
%   { ...
%     amplitude:  {{list of algs first subfigure}, {second subfig}, {third}}, ...
%     phase:        {{list of algs first subfigure}, {second subfig}, {third}} ...
%     calculation time:  {{list of algs first subfigure}, {second subfig}, {third}}, ...
%   }, ...
%   data index - 1 for first harmonic, 2 for next calculated harmonic..., ...
%   [x range], ...
%   { ...
%   amplitude:    {[y limits first subfigure], [y limits second], [third]}, ...
%   phase:    {[y limits first subfigure], [y limits second], [third]}, ...
%   calculation time:    {[y limits first subfigure], [y limits second], [third]}, ...
%   }, ...
%   'xlabel', ...
%   'figure prefix')


%% signal frequency 1st harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_f_h1/varied_f_h1input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'WR', 'WF'}, {'FE', 'MH', 'SR'}}, ...
%     {{'SV'}, {'WF'}, {'FE', 'SR', 'MH', 'WR'}} ...
%     {{'SV', 'SR'}, {'FE', 'WF', 'WR'}, {'MH'}}, ...
% }, ...
% 1, ...
% [49.9 50.1], ...
% { ...
%     {[-50 50], [-1.5 1.5], [-1e-6 1e-6]}, ...
%     {[-3000 500], [-40 40], [-2e-8 2e-8]}, ...
%     {[0 40], [0 0.2], [0 0.0002]}, ...
% }, ...
% 'Signal frequency (Hz)', ...
% 'results/pretty_varied_f_h1_-_h1_')

%% signal frequency with 2nd harmonic, plotting 1st harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_f_h2/varied_f_h2input_and_plot_data.mat',...
% { ...
%     {{'SV', 'WF'}, {'FE', 'SR'}, {'MH'}}, ...
%     {{'SV'}, {'WF'}, {'FE', 'SR', 'MH', 'WR'}} ...
% }, ...
% 1, ...
% [49.9 50.1], ...
% { ...
%     {[-400 60], [-1 1], [-1e-9 1e-9]}, ...
%     {[-3000 500], [-40 40], [-1e-2 3e-2]}, ...
% }, ...
% 'Signal frequency (Hz)', ...
% 'results/pretty_varied_f_h2_-_h1_')

%% signal frequency with 2nd harmonic, plotting 2nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_f_h2/varied_f_h2input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'SR'}, {'MH'}}, ...
%     {{'SV'}, {'SR'}, {'MH'}} ...
% }, ...
% 2, ...
% [49.9 50.1], ...
% { ...
%     {[-150 150], [-0.3 0.3], [-1e-9 1e-9]}, ...
%     {[-200 1000], [-5e-3 5e-3], [-1e-9 1e-9]}, ...
% }, ...
% 'Signal frequency (Hz)', ...
% 'results/pretty_varied_f_h2_-_h2_')
% XXX missing WF

%% signal frequency with 3rd harmonic, plotting 3rd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_f_h3/varied_f_h3input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'SR'}, {'MH'}}, ...
%     {{'SV'}, {'SR'}, {'MH'}} ...
% }, ...
% 2, ...
% [49.9 50.1], ...
% { ...
%     {[-70 70], [-0.3 0.3], [-1e-9 1e-9]}, ...
%     {[-3000 3000], [-10e-3 10e-3], [-1e-9 1e-9]}, ...
% }, ...
% 'Signal frequency (Hz)', ...
% 'results/pretty_varied_f_h3_-_h3_')
% XXX missing WF

%% signal frequency with 5rd harmonic, plotting 5rd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_f_h5/varied_f_h5input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'SR'}, {'MH'}}, ...
%     {{'SV'}, {'SR'}, {'MH'}} ...
% }, ...
% 2, ...
% [49.9 50.1], ...
% { ...
%     {[-30 30], [-0.3 0.3], [-1e-9 1e-9]}, ...
%     {[-3000 3000], [-30e-3 30e-3], [-1e-9 1e-9]}, ...
% }, ...
% 'Signal frequency (Hz)', ...
% 'results/pretty_varied_f_h5_-_h5_')
% XXX missing WF

%% sampling frequency 1st harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_fs_h1/varied_fs_h1input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'WF', 'WR'}, {'FE', 'SR', 'MH'}}, ...
%     {{'SV'}, {'WF'}, {'FE', 'SR', 'MH', 'WR'}} ...
%     {{'SV', 'SR'}, {'FE', 'WF', 'WR'}, {'MH'}}, ...
% }, ...
% 1, ...
% [0 100e3], ...
% { ...
%     {[-50 50], [-1.5 0.5], [-0.05 0.05]}, ...
%     {[-3000 3000], [-30 5], [-4e-8 4e-8]}, ...
%     {[0 40], [0 0.13], [0 0.0002]}, ...
% }, ...
% 'Sampling frequency (Hz)', ...
% 'results/pretty_varied_fs_h1_-_h1_')

%% sampling frequency with 2nd harmonic, plotting 2nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_fs_h2/varied_fs_h2input_and_plot_data.mat',...
% { ...
%     {{'SV', 'WF'}, {'SR'}, {'MH'}}, ...
%     {{'SV'}, {'WF'}, {'SR', 'MH'}} ...
% }, ...
% 2, ...
% [0 100e3], ...
% { ...
%     {[-3500 300], [-5 0.5], [-1e-9 1e-9]}, ...
%     {[-3500 3500], [-60 5], [-0.05 0.10]}, ...
% }, ...
% 'Sampling frequency (Hz)', ...
% 'results/pretty_varied_fs_h2_-_h2_')

%% sampling frequency with 3nd harmonic, plotting 3nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_fs_h3/varied_fs_h3input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'SR', 'WF'}, {'MH'}}, ...
%     {{'SV'}, {'WF'}, {'SR', 'MH'}} ...
% }, ...
% 2, ...
% [0 100e3], ...
% { ...
%     {[-60 60], [-5 1], [-1e-9 1e-9]}, ...
%     {[-3500 3500], [-80 5], [-0.02 0.15]}, ...
% }, ...
% 'Sampling frequency (Hz)', ...
% 'results/pretty_varied_fs_h3_-_h3_')

%% sampling frequency with 5nd harmonic, plotting 5nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_fs_h5/varied_fs_h5input_and_plot_data.mat',...
% { ...
%     {{'SV'}, {'SR', 'WF'}, {'MH'}}, ...
%     {{'SV'}, {'WF'}, {'SR', 'MH'}} ...
% }, ...
% 2, ...
% [0 100e3], ...
% { ...
%     {[-30 30], [-6 2], [-1e-9 1e-9]}, ...
%     {[-3500 3500], [-100 5], [-0.02 0.4]}, ...
% }, ...
% 'Sampling frequency (Hz)', ...
% 'results/pretty_varied_fs_h5_-_h5_')

%% signal length 1st harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_M_h1/varied_M_h1input_and_plot_data.mat',...
% { ...
%     {{'WR', 'WF', 'SV'}, {'WR'}, {'SR', 'MH', 'FE'}}, ...
%     {{'SV', 'WF'}, {'FE', 'SR', 'MH', 'WR'}, {'MH'}} ...
%     {{'SV', 'SR'}, {'FE', 'WF', 'WR'}, {'MH'}}, ...
% }, ...
% 1, ...
% [0 20], ...
% { ...
%     {[-800 400], [-1e-4 1e-4], [-3e-7 3e-7]}, ...
%     {[-3000 3000], [-3e-11 3e-11], [-3e-11, 3e-11]}, ...
%     {[0 200], [0 0.25], [0 1.5e-5]}, ...
% }, ...
% 'Record length (multiples of signal period)', ...
% 'results/pretty_varied_M_h1_-_h1_')

%% signal length with 2nd harmonic, plotting 2nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_M_h2/varied_M_h2input_and_plot_data.mat',...
% { ...
%     {{'WF'}, {'WF', 'SV'}, {'FE', 'SR', 'MH', 'WR'}}, ...
%     {{'SV', 'WF'}, {'FE', 'SR', 'MH', 'WR'}, {'MH'}} ...
% }, ...
% 2, ...
% [0 20], ...
% { ...
%     {[-10e3 10e3], [-125 125], [-3e-7 1e-7]}, ...
%     {[-3000 3000], [-3e-11 3e-11], [-3e-11, 3e-11]}, ...
% }, ...
% 'Record length (multiples of signal period)', ...
% 'results/pretty_varied_M_h2_-_h2_')

%% signal length with 3nd harmonic, plotting 3nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_M_h3/varied_M_h3input_and_plot_data.mat',...
% { ...
%     {{'WF', 'SV'}, {'SR'}, {'FE', 'MH', 'WR'}}, ...
%     {{'SV', 'WF'}, {'FE', 'SR', 'MH', 'WR'}, {'MH'}} ...
% }, ...
% 2, ...
% [0 20], ...
% { ...
%     {[-50 50], [-1.5e-6 1e-6], [-3e-7 1e-7]}, ...
%     {[-2500 2000], [-3e-11 3e-11], [-3e-11, 3e-11]}, ...
% }, ...
% 'Record length (multiples of signal period)', ...
% 'results/pretty_varied_M_h3_-_h3_')

%% signal length with 5nd harmonic, plotting 5nd harmonic ------------------------------------------------------------------
% make_triple_plot(...
% 'results/varied_M_h5/varied_M_h5input_and_plot_data.mat',...
% { ...
%     {{'WF', 'SV'}, {'SR'}, {'FE', 'MH', 'WR'}}, ...
%     {{'SV', 'WF'}, {'FE', 'SR', 'MH', 'WR'}, {'MH'}} ...
% }, ...
% 2, ...
% [0 20], ...
% { ...
%     {[-40 20], [-1.5e-5 1e-6], [-3e-7 1e-7]}, ...
%     {[-2500 2000], [-3e-11 3e-11], [-3e-11, 3e-11]}, ...
% }, ...
% 'Record length (multiples of signal period)', ...
% 'results/pretty_varied_M_h5_-_h5_')

%% noise 1st harmonic ------------------------------------------------------------------
% pFE = {';PSFE estimate;', 'color', [166,206,227]./256, 'linestyle', '-', 'linewidth', 2}; % light blue
% pWR = {';Windowed RMS;','color', [ 31,120,180]./256, 'linestyle', '-', 'linewidth', 2}; % dark blue
% pWF = {';FFT, window;','color', [178,223,138]./256, 'linestyle', '-', 'linewidth', 2}; % light green
% pMH = {';MHFE;','color', [ 51,160, 44]./256, 'linestyle', '-', 'linewidth', 2}; % dark green
% pSR = {';SplineResampling;','color', [251,154,153]./256, 'linestyle', '-', 'linewidth', 2}; % light red
% pSV = {';resamplingSVstream;','color', [227, 26, 28]./256, 'linestyle', '-', 'linewidth', 2}; % dark red
% data_index = 1; % 1st harmonic
% data = load('results/varied_noise_h1/varied_noise_h1input_and_plot_data.mat');
% plot(data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.FE_AErr.v(data_index, :), pFE{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SR_AErr.v(data_index, :), pSR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WF_AErr.v(data_index, :), pWF{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.MH_AErr.v(data_index, :), pMH{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WR_AErr.v(data_index, :), pWR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SV_AErr.v(data_index, :), pSV{:})
% xlabel('noise Ïƒ (V)')
% ylabel('amp. error (\muV)', 'interpreter', 'tex')
% saveas(gcf(), ['results/pretty_varied_noise_h1_-_h1_Aerr.png'])
% close
% figure()
% plot(data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.FE_phErr.v(data_index, :)), pFE{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SR_phErr.v(data_index, :)), pSR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WF_phErr.v(data_index, :)), pWF{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.MH_phErr.v(data_index, :)), pMH{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WR_phErr.v(data_index, :)), pWR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SV_phErr.v(data_index, :)), pSV{:})
% xlabel('noise Ïƒ (V)')
% ylabel('phase error (mrad)', 'interpreter', 'tex')
% ylim([-0.7 0.7])
% saveas(gcf(), ['results/pretty_varied_noise_h1_-_h1_pherr.png'])
% close

%% noise with 2nd harmonic, plotting 2nd harmonic ------------------------------------------------------------------
% pFE = {';PSFE estimate;', 'color', [166,206,227]./256, 'linestyle', '-', 'linewidth', 2}; % light blue
% pWR = {';Windowed RMS;','color', [ 31,120,180]./256, 'linestyle', '-', 'linewidth', 2}; % dark blue
% pWF = {';FFT, window;','color', [178,223,138]./256, 'linestyle', '-', 'linewidth', 2}; % light green
% pMH = {';MHFE;','color', [ 51,160, 44]./256, 'linestyle', '-', 'linewidth', 2}; % dark green
% pSR = {';SplineResampling;','color', [251,154,153]./256, 'linestyle', '-', 'linewidth', 2}; % light red
% pSV = {';resamplingSVstream;','color', [227, 26, 28]./256, 'linestyle', '-', 'linewidth', 2}; % dark red
% data_index = 2; % 1st harmonic
% data = load('results/varied_noise_h2/varied_noise_h2input_and_plot_data.mat');
% plot(data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.FE_AErr.v(data_index, :), pFE{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SR_AErr.v(data_index, :), pSR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WF_AErr.v(data_index, :), pWF{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.MH_AErr.v(data_index, :), pMH{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WR_AErr.v(data_index, :), pWR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SV_AErr.v(data_index, :), pSV{:})
% xlabel('noise Ïƒ (V)')
% ylabel('amp. error (\muV)', 'interpreter', 'tex')
% saveas(gcf(), ['results/pretty_varied_noise_h2_-_h2_Aerr.png'])
% close
% figure()
% plot(data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.FE_phErr.v(data_index, :)), pFE{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SR_phErr.v(data_index, :)), pSR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WF_phErr.v(data_index, :)), pWF{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.MH_phErr.v(data_index, :)), pMH{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WR_phErr.v(data_index, :)), pWR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SV_phErr.v(data_index, :)), pSV{:})
% xlabel('noise Ïƒ (V)')
% ylabel('phase error (mrad)', 'interpreter', 'tex')
% ylim([-5 5])
% saveas(gcf(), ['results/pretty_varied_noise_h2_-_h2_pherr.png'])
% close

%% noise with 3nd harmonic, plotting 3nd harmonic ------------------------------------------------------------------
pFE = {';PSFE estimate;', 'color', [166,206,227]./256, 'linestyle', '-', 'linewidth', 2}; % light blue
pWR = {';Windowed RMS;','color', [ 31,120,180]./256, 'linestyle', '-', 'linewidth', 2}; % dark blue
pWF = {';FFT, window;','color', [178,223,138]./256, 'linestyle', '-', 'linewidth', 2}; % light green
pMH = {';MHFE;','color', [ 51,160, 44]./256, 'linestyle', '-', 'linewidth', 2}; % dark green
pSR = {';SplineResampling;','color', [251,154,153]./256, 'linestyle', '-', 'linewidth', 2}; % light red
pSV = {';resamplingSVstream;','color', [227, 26, 28]./256, 'linestyle', '-', 'linewidth', 2}; % dark red
data_index = 2; % 1st harmonic
data = load('results/varied_noise_h3/varied_noise_h3input_and_plot_data.mat');
plot(data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.FE_AErr.v(data_index, :), pFE{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SR_AErr.v(data_index, :), pSR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WF_AErr.v(data_index, :), pWF{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.MH_AErr.v(data_index, :), pMH{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WR_AErr.v(data_index, :), pWR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SV_AErr.v(data_index, :), pSV{:})
xlabel('noise Ïƒ (V)')
ylabel('amp. error (\muV)', 'interpreter', 'tex')
saveas(gcf(), ['results/pretty_varied_noise_h3_-_h3_Aerr.png'])
close
figure()
plot(data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.FE_phErr.v(data_index, :)), pFE{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SR_phErr.v(data_index, :)), pSR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WF_phErr.v(data_index, :)), pWF{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.MH_phErr.v(data_index, :)), pMH{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WR_phErr.v(data_index, :)), pWR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SV_phErr.v(data_index, :)), pSV{:})
xlabel('noise Ïƒ (V)')
ylabel('phase error (mrad)', 'interpreter', 'tex')
ylim([-5 5])
saveas(gcf(), ['results/pretty_varied_noise_h3_-_h3_pherr.png'])
close

%% noise with 5nd harmonic, plotting 5nd harmonic ------------------------------------------------------------------
pFE = {';PSFE estimate;', 'color', [166,206,227]./256, 'linestyle', '-', 'linewidth', 2}; % light blue
pWR = {';Windowed RMS;','color', [ 31,120,180]./256, 'linestyle', '-', 'linewidth', 2}; % dark blue
pWF = {';FFT, window;','color', [178,223,138]./256, 'linestyle', '-', 'linewidth', 2}; % light green
pMH = {';MHFE;','color', [ 51,160, 44]./256, 'linestyle', '-', 'linewidth', 2}; % dark green
pSR = {';SplineResampling;','color', [251,154,153]./256, 'linestyle', '-', 'linewidth', 2}; % light red
pSV = {';resamplingSVstream;','color', [227, 26, 28]./256, 'linestyle', '-', 'linewidth', 2}; % dark red
data_index = 2; % 1st harmonic
data = load('results/varied_noise_h5/varied_noise_h5input_and_plot_data.mat');
plot(data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.FE_AErr.v(data_index, :), pFE{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SR_AErr.v(data_index, :), pSR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WF_AErr.v(data_index, :), pWF{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.MH_AErr.v(data_index, :), pMH{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WR_AErr.v(data_index, :), pWR{:}, data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SV_AErr.v(data_index, :), pSV{:})
xlabel('noise Ïƒ (V)')
ylabel('amp. error (\muV)', 'interpreter', 'tex')
saveas(gcf(), ['results/pretty_varied_noise_h5_-_h5_Aerr.png'])
close
figure()
plot(data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.FE_phErr.v(data_index, :)), pFE{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SR_phErr.v(data_index, :)), pSR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WF_phErr.v(data_index, :)), pWF{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.MH_phErr.v(data_index, :)), pMH{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WR_phErr.v(data_index, :)), pWR{:}, data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SV_phErr.v(data_index, :)), pSV{:})
xlabel('noise Ïƒ (V)')
ylabel('phase error (mrad)', 'interpreter', 'tex')
ylim([-5 5])
saveas(gcf(), ['results/pretty_varied_noise_h5_-_h5_pherr.png'])
close


end % function pretty_plots

%% function make_triple_plot() -----------------------------------
function make_triple_plot(data_file, algcell, data_index, xlimits, ylimitscell, s_xlabel, fig_file_prefix)

    pFE = {';PSFE estimate;', 'color', [166,206,227]./256, 'linestyle', '-', 'linewidth', 2}; % light blue
    pWR = {';Windowed RMS;','color', [ 31,120,180]./256, 'linestyle', '-', 'linewidth', 2}; % dark blue
    pWF = {';FFT, window;','color', [178,223,138]./256, 'linestyle', '-', 'linewidth', 2}; % light green
    pMH = {';MHFE;','color', [ 51,160, 44]./256, 'linestyle', '-', 'linewidth', 2}; % dark green
    pSR = {';SplineResampling;','color', [251,154,153]./256, 'linestyle', '-', 'linewidth', 2}; % light red
    pSV = {';resamplingSVstream;','color', [227, 26, 28]./256, 'linestyle', '-', 'linewidth', 2}; % dark red

    data = load(data_file);

    % test plots -- only temporary for manual data review. comment if not using!
    if 1 % if 0/if 1 so I do not have to comment all lines, just change value
        figure()
        plot(data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.FE_AErr.v(data_index, :), pFE{:}, ...
            data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SR_AErr.v(data_index, :), pSR{:}, ...
            data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WF_AErr.v(data_index, :), pWF{:}, ...
            data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.MH_AErr.v(data_index, :), pMH{:}, ...
            data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.WR_AErr.v(data_index, :), pWR{:}, ...
            data.ndaxes.values{1}(:, 1), 1e6.*data.ndres.SV_AErr.v(data_index, :), pSV{:})
        title('amplitude error')
        legend('FE', 'SR', 'WF', 'MH', 'WR', 'SV')
        figure()
        plot(data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.FE_phErr.v(data_index, :)), pFE{:}, ...
            data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SR_phErr.v(data_index, :)), pSR{:}, ...
            data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WF_phErr.v(data_index, :)), pWF{:}, ...
            data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.MH_phErr.v(data_index, :)), pMH{:}, ...
            data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.WR_phErr.v(data_index, :)), pWR{:}, ...
            data.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.SV_phErr.v(data_index, :)), pSV{:})
        title('phase error')
        legend('FE', 'SR', 'WF', 'MH', 'WR', 'SV')
        figure()
        plot(data.ndaxes.values{1}(:, 1), data.ndres.FE_ct.v(1, :), pFE{:}, ...
            data.ndaxes.values{1}(:, 1), data.ndres.SR_ct.v(1, :), pSR{:}, ...
            data.ndaxes.values{1}(:, 1), data.ndres.WF_ct.v(1, :), pWF{:}, ...
            data.ndaxes.values{1}(:, 1), data.ndres.MH_ct.v(1, :), pMH{:}, ...
            data.ndaxes.values{1}(:, 1), data.ndres.WR_ct.v(1, :), pWR{:}, ...
            data.ndaxes.values{1}(:, 1), data.ndres.SV_ct.v(1, :), pSV{:})
        title('calculation time')
        legend('FE', 'SR', 'WF', 'MH', 'WR', 'SV')
        keyboard
    end % if 1


    % AMPLITUDE --------------------------------------
    figure
    hold on
    for k = 1:3 % 3 subfigures
        subplot(310+k)
        command = 'plot(';
        for j = 1:numel(algcell{1}{k})
            if j ~= 1
                command = [command ', '];
            end
            command = sprintf('%sdata.ndaxes.values{1}(:, 1), 1e6.*data.ndres.%s_AErr.v(%d, :), p%s{:}', command, algcell{1}{k}{j}, data_index, algcell{1}{k}{j});
        end % for
        command = [command ');'];
        eval(command)
        grid on
        if k < 3
            set(gca,'xticklabel', {})
        else
            xlabel(s_xlabel)
        end
        ylabel('amp. error (\muV)', 'interpreter', 'tex')
        xlim(xlimits);
        ylim(ylimitscell{1}{k});
    end
    hold off
    saveas(gcf(), [fig_file_prefix 'AErr.png'])
    close

    % PHASE --------------------------------------
    figure
    hold on
    for k = 1:3 % 3 subfigures
        subplot(310+k)
        command = 'plot(';
        for j = 1:numel(algcell{2}{k})
            if j ~= 1
                command = [command ', '];
            end
            command = sprintf('%sdata.ndaxes.values{1}(:, 1), 1e3.*wrapToPi(data.ndres.%s_phErr.v(%d, :)), p%s{:}', command, algcell{2}{k}{j}, data_index, algcell{2}{k}{j});
        end % for
        command = [command ');'];
        eval(command)
        grid on
        if k < 3
            set(gca,'xticklabel', {})
        else
            xlabel(s_xlabel)
        end
        ylabel('phase error (mrad)', 'interpreter', 'tex')
        xlim(xlimits)
        ylim(ylimitscell{2}{k})
    end
    hold off
    saveas(gcf(), [fig_file_prefix 'phErr.png'])
    close

    % CALCULATION TIME --------------------------------------
    % calculation time plotted only if set algcell
    if numel(algcell) > 2
        figure
        hold on
        for k = 1:3 % 3 subfigures
            subplot(310+k)
            command = 'plot(';
            for j = 1:numel(algcell{3}{k})
                if j ~= 1
                    command = [command ', '];
                end
                % calculation time - data_index must be always 1
                command = sprintf('%sdata.ndaxes.values{1}(:, 1), data.ndres.%s_ct.v(%d, :), p%s{:}', command, algcell{3}{k}{j}, 1, algcell{3}{k}{j});
            end % for
            command = [command ');'];
            eval(command)
            grid on
            if k < 3
                set(gca,'xticklabel', {})
            else
                xlabel(s_xlabel)
            end
            ylabel('calc. time (s)', 'interpreter', 'tex')
            xlim(xlimits)
            ylim(ylimitscell{3}{k})
        end
        hold off
        saveas(gcf(), [fig_file_prefix 'ct.png'])
        close
    end
end % function make_triple_plot
